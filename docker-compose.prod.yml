version: "2.0"
services:
  ###################################### Ferrolene ####################################
  ferrolene-cliente:
    build:
      context: 'smart-front'
      dockerfile: Dockerfile
      args:
        baseurl: http://35.169.169.38:8001/api/
        port: 8000
    container_name: ferrolene-cliente
    ports:
      - '8000:8000'    #obrigratorio
  ferrolene-api: #finalizado
    build:
      context: 'smart-api'
      dockerfile: Dockerfile
    command: npm start
    container_name: ferrolene-api
    environment:
      NODE_ENV: production
      HOST: 35.169.169.38           #obrigatorios caso não coloque o DNS
      PORT: 8001                    #obrigatorios caso não coloque o DNS
      DATABASE: ferrolone           #obrigatorios
      DATABASE_SERVICE: mongo       #qual o nome do seu banco Ex. o serviço mongo do docker é o nome do
      # DNS:
    tty: true
    ports:
      - '8001:8001'        #obrigratorio
    depends_on:
      - mongo
  ###################################### CEBRACE ####################################
  cebrace-cliente:
    build:
      context: 'smart-front'
      dockerfile: Dockerfile
      args:
        baseurl: http://35.169.169.38:8005/api/
        port: 8004
    container_name: cebrace-cliente
    ports:
      - '8004:8004'    #obrigratorio
  cebrace-api: #finalizado
    build:
      context: 'smart-api'
      dockerfile: Dockerfile
    command: npm start
    container_name: cebrace-api
    environment:
      NODE_ENV: production
      HOST: 35.169.169.38           #obrigatorios caso não coloque o DNS
      PORT: 8005                    #obrigatorios caso não coloque o DNS
      DATABASE: cebrace          #obrigatorios
      DATABASE_SERVICE: mongo       #qual o nome do seu banco Ex. o serviço mongo do docker é o nome do
      # DNS:
    tty: true
    ports:
      - '8005:8005'        #obrigratorio
    depends_on:
      - mongo
  ###################################### GM ####################################
  gm-cliente:
    build:
      context: 'smart-front'
      dockerfile: Dockerfile
      args:
        baseurl: http://35.169.169.38:8007/api/
        port: 8006
    container_name: gm-cliente
    ports:
      - '8006:8006'    #obrigratorio
  gm-api: #finalizado
    build:
      context: 'smart-api'
      dockerfile: Dockerfile
    command: npm start
    container_name: gm-api
    environment:
      NODE_ENV: production
      HOST: 35.169.169.38           #obrigatorios caso não coloque o DNS
      PORT: 8007                    #obrigatorios caso não coloque o DNS
      DATABASE: gm                  #obrigatorios
      DATABASE_SERVICE: mongo       #qual o nome do seu banco Ex. o serviço mongo do docker é o nome do
        # DNS:
    tty: true
    ports:
      - '8007:8007'        #obrigratorio
    depends_on:
      - mongo
  ###################################### NESTLE ####################################
  nestle-cliente:
    build:
      context: 'smart-front'
      dockerfile: Dockerfile
      args:
        baseurl: http://35.169.169.38:8009/api/
        port: 8008
    container_name: nestle-cliente
    ports:
      - '8008:8008'    #obrigratorio
  nestle-api: #finalizado
    build:
      context: 'smart-api'
      dockerfile: Dockerfile
    command: npm start
    container_name: nestle-api
    environment:
      NODE_ENV: production
      HOST: 35.169.169.38           #obrigatorios caso não coloque o DNS
      PORT: 8009                    #obrigatorios caso não coloque o DNS
      DATABASE: nestle          #obrigatorios
      DATABASE_SERVICE: mongo       #qual o nome do seu banco Ex. o serviço mongo do docker é o nome do
        # DNS:
    tty: true
    ports:
      - '8009:8009'        #obrigratorio
    depends_on:
      - mongo
  ###################################### TESTE ITERNO ####################################
  test-interno-homologacao:
    build:
      context: 'smart-front'
      dockerfile: Dockerfile
      args:
        baseurl: http://35.169.169.38:8011/api/
        port: 8010
    container_name: test-interno-homologacao
    ports:
      - '8010:8010'    #obrigratorio
  test-interno-api-homologacao: #finalizado
    build:
      context: 'smart-api'
      dockerfile: Dockerfile
    command: npm start
    container_name: test-interno-api-homologacao
    environment:
      NODE_ENV: production
      HOST: 35.169.169.38           #obrigatorios caso não coloque o DNS
      PORT: 8011                    #obrigatorios caso não coloque o DNS
      DATABASE: testeinterno        #obrigatorios
      DATABASE_SERVICE: mongo       #qual o nome do seu banco Ex. o serviço mongo do docker é o nome do
        # DNS:
    tty: true
    ports:
      - '8011:8011'        #obrigratorio
    depends_on:
      - mongo
  # ###################################### PILOTO 6 ####################################
  #   piloto-cliente-6:
  #     build:
  #       context: 'smart-front'
  #       dockerfile: Dockerfile
  #       args:
  #         baseurl: http://35.169.169.38:8014/api/
  #         port: 8012
  #     container_name: piloto-cliente-6
  #     ports:
  #       - '8012:8012'    #obrigratorio
  #   piloto-api-6: #finalizado
  #     build:
  #       context: 'smart-api'
  #       dockerfile: Dockerfile
  #     command: npm start
  #     container_name: piloto-api-6
  #     environment:
  #       NODE_ENV: production
  #       HOST: 35.169.169.38           #obrigatorios caso não coloque o DNS
  #       PORT: 8014                    #obrigatorios caso não coloque o DNS
  #       DATABASE: reciclopac5          #obrigatorios
  #       DATABASE_SERVICE: mongo       #qual o nome do seu banco Ex. o serviço mongo do docker é o nome do
  #       # DNS:
  #     tty: true
  #     ports:
  #       - '8014:8014'        #obrigratorio
  #     depends_on:
  #       - mongo
  # ###################################### PILOTO 7 ####################################
  #   piloto-cliente-7:
  #     build:
  #       context: 'smart-front'
  #       dockerfile: Dockerfile
  #       args:
  #         baseurl: http://35.169.169.38:8016/api/
  #         port: 8015
  #     container_name: piloto-cliente-7
  #     ports:
  #       - '8015:8015'    #obrigratorio
  #   piloto-api-7: #finalizado
  #     build:
  #       context: 'smart-api'
  #       dockerfile: Dockerfile
  #     command: npm start
  #     container_name: piloto-api-7
  #     environment:
  #       NODE_ENV: production
  #       HOST: 35.169.169.38           #obrigatorios caso não coloque o DNS
  #       PORT: 8016                    #obrigatorios caso não coloque o DNS
  #       DATABASE: reciclopac6          #obrigatorios
  #       DATABASE_SERVICE: mongo       #qual o nome do seu banco Ex. o serviço mongo do docker é o nome do
  #       # DNS:
  #     tty: true
  #     ports:
  #       - '8016:8016'        #obrigratorio
  #     depends_on:
  #       - mongo
  ###################################### CONFIGURAÇÕES DO MONGO  ####################################
  mongo:
    image: 'mongo:latest'
    container_name: mongo
    ports:
      - '27017:27017'
    volumes:
      - ./data/db:/data/db
      - ./data/backup:/data/backup
###################################### DEFININDO UMA REDE DE CONEXÃO ####################################
networks:
  net-recicla:
    driver: bridge
    ipam:
     config:
       - subnet: 172.16.0.0/24
         gateway: 172.16.0.254