version: "2.0"
services:
  ###################################### Ferrolene ####################################
  ferrolene-cliente:
    build:
      context: 'smart-front'
      dockerfile: Dockerfile
      args:
        baseurl: http://35.169.169.38:8001/api/
        port: 8000
    container_name: ferrolene-cliente
    ports:
      - '8000:8000'    #obrigratorio
  ferrolene-api: #finalizado
    build:
      context: 'smart-api'
      dockerfile: Dockerfile
    command: npm start
    container_name: ferrolene-api
    environment:
      NODE_ENV: production
      HOST: 35.169.169.38           #obrigatorios caso não coloque o DNS
      PORT: 8001                    #obrigatorios caso não coloque o DNS
      DATABASE: ferrolone           #obrigatorios
      DATABASE_SERVICE: mongo       #qual o nome do seu banco Ex. o serviço mongo do docker é o nome do
      # DNS:
    tty: true
    ports:
      - '8001:8001'        #obrigratorio
    network_mode: mongo_net
  ###################################### CEBRACE ####################################
  cebrace-cliente:
    build:
      context: 'smart-front'
      dockerfile: Dockerfile
      args:
        baseurl: http://35.169.169.38:8005/api/
        port: 8004
    container_name: cebrace-cliente
    ports:
      - '8004:8004'    #obrigratorio
  cebrace-api: #finalizado
    build:
      context: 'smart-api'
      dockerfile: Dockerfile
    command: npm start
    container_name: cebrace-api
    environment:
      NODE_ENV: production
      HOST: 35.169.169.38           #obrigatorios caso não coloque o DNS
      PORT: 8005                    #obrigatorios caso não coloque o DNS
      DATABASE: cebrace          #obrigatorios
      DATABASE_SERVICE: mongo       #qual o nome do seu banco Ex. o serviço mongo do docker é o nome do
      # DNS:
    tty: true
    ports:
      - '8005:8005'        #obrigratorio
    network_mode: mongo_net
  ###################################### GM ####################################
  gm-cliente:
    build:
      context: 'smart-front'
      dockerfile: Dockerfile
      args:
        baseurl: http://35.169.169.38:8007/api/
        port: 8006
    container_name: gm-cliente
    ports:
      - '8006:8006'    #obrigratorio
  gm-api: #finalizado
    build:
      context: 'smart-api'
      dockerfile: Dockerfile
    command: npm start
    container_name: gm-api
    environment:
      NODE_ENV: production
      HOST: 35.169.169.38           #obrigatorios caso não coloque o DNS
      PORT: 8007                    #obrigatorios caso não coloque o DNS
      DATABASE: gm                  #obrigatorios
      DATABASE_SERVICE: mongo       #qual o nome do seu banco Ex. o serviço mongo do docker é o nome do
        # DNS:
    tty: true
    ports:
      - '8007:8007'        #obrigratorio
    network_mode: mongo_net
  ###################################### NESTLE ####################################
  nestle-cliente:
    build:
      context: 'smart-front'
      dockerfile: Dockerfile
      args:
        baseurl: http://35.169.169.38:8009/api/
        port: 8008
    container_name: nestle-cliente
    ports:
      - '8008:8008'    #obrigratorio
  nestle-api: #finalizado
    build:
      context: 'smart-api'
      dockerfile: Dockerfile
    command: npm start
    container_name: nestle-api
    environment:
      NODE_ENV: production
      HOST: 35.169.169.38           #obrigatorios caso não coloque o DNS
      PORT: 8009                    #obrigatorios caso não coloque o DNS
      DATABASE: nestle          #obrigatorios
      DATABASE_SERVICE: mongo       #qual o nome do seu banco Ex. o serviço mongo do docker é o nome do
        # DNS:
    tty: true
    ports:
      - '8009:8009'        #obrigratorio
    network_mode: mongo_net
  ###################################### JSL ####################################
  jsl-cliente:
    build:
      context: 'smart-front'
      dockerfile: Dockerfile
      args:
        baseurl: http://35.169.169.38:8014/api/
        port: 8012
    container_name: jsl-cliente
    ports:
      - '8012:8012'    #obrigratorio
  jsl-api: #finalizado
    build:
      context: 'smart-api'
      dockerfile: Dockerfile
    command: npm start
    container_name: jsl-api
    environment:
      NODE_ENV: production
      HOST: 35.169.169.38           #obrigatorios caso não coloque o DNS
      PORT: 8014                    #obrigatorios caso não coloque o DNS
      DATABASE: jsl                 #obrigatorios
      DATABASE_SERVICE: mongo       #qual o nome do seu banco Ex. o serviço mongo do docker é o nome do
      # DNS:
    tty: true
    ports:
      - '8014:8014'        #obrigratorio
    network_mode: mongo_net
  ###################################### NISSAN ####################################
  nissan-cliente:
    build:
      context: 'smart-front'
      dockerfile: Dockerfile
      args:
        baseurl: http://35.169.169.38:8016/api/
        port: 8015
    container_name: nissan-cliente
    ports:
      - '8015:8015'    #obrigratorio
  nissan-api: #finalizado
    build:
      context: 'smart-api'
      dockerfile: Dockerfile
    command: npm start
    container_name: nissan-api
    environment:
      NODE_ENV: production
      HOST: 35.169.169.38           #obrigatorios caso não coloque o DNS
      PORT: 8016                    #obrigatorios caso não coloque o DNS
      DATABASE: nissan          #obrigatorios
      DATABASE_SERVICE: mongo       #qual o nome do seu banco Ex. o serviço mongo do docker é o nome do
      # DNS:
    tty: true
    ports:
      - '8016:8016'        #obrigratorio
    network_mode: mongo_net

  ###################################### CNH MG  ####################################
  cnh-mg-cliente:
    build:
      context: 'smart-front'
      dockerfile: Dockerfile
      args:
        baseurl: http://35.169.169.38:8020/api/
        port: 8019
    container_name: cnh-mg-cliente
    ports:
      - '8019:8019'    #obrigratorio
  cnh-mg-api: #finalizado
    build:
      context: 'smart-api'
      dockerfile: Dockerfile
    command: npm start
    container_name: cnh-mg-api
    environment:
      NODE_ENV: production
      HOST: 35.169.169.38           #obrigatorios caso não coloque o DNS
      PORT: 8020                   #obrigatorios caso não coloque o DNS
      DATABASE: cnhmg            #obrigatorios
      DATABASE_SERVICE: mongo       #qual o nome do seu banco Ex. o serviço mongo do docker é o nome do
      # DNS:
    tty: true
    ports:
      - '8020:8020'        #obrigratorio
    network_mode: mongo_net
  ###################################### CNH CDP  ####################################
  cnh-cdp-cliente:
    build:
      context: 'smart-front'
      dockerfile: Dockerfile
      args:
        baseurl: http://35.169.169.38:8022/api/
        port: 8021
    container_name: cnh-cdp-cliente
    ports:
      - '8021:8021'    #obrigratorio
  cnh-cdp-api: #finalizado
    build:
      context: 'smart-api'
      dockerfile: Dockerfile
    command: npm start
    container_name: cnh-cdp-api
    environment:
      NODE_ENV: production
      HOST: 35.169.169.38           #obrigatorios caso não coloque o DNS
      PORT: 8022                  #obrigatorios caso não coloque o DNS
      DATABASE: cnhcdp          #obrigatorios
      DATABASE_SERVICE: mongo       #qual o nome do seu banco Ex. o serviço mongo do docker é o nome do
      # DNS:
    tty: true
    ports:
      - '8022:8022'        #obrigratorio
    network_mode: mongo_net
  ###################################### GM Manufatura  ####################################
  gm-manufatura-cliente:
    build:
      context: 'smart-front'
      dockerfile: Dockerfile
      args:
        baseurl: http://35.169.169.38:8024/api/
        port: 8023
    container_name: gm-manufatura-cliente
    ports:
      - '8023:8023'    #obrigratorio
  gm-manufatura-api: #finalizado
    build:
      context: 'smart-api'
      dockerfile: Dockerfile
    command: npm start
    container_name: gm-manufatura-api
    environment:
      NODE_ENV: production
      HOST: 35.169.169.38           #obrigatorios caso não coloque o DNS
      PORT: 8024                  #obrigatorios caso não coloque o DNS
      DATABASE: gmmanufatura          #obrigatorios
      DATABASE_SERVICE: mongo       #qual o nome do seu banco Ex. o serviço mongo do docker é o nome do
      # DNS:
    tty: true
    ports:
      - '8024:8024'        #obrigratorio
    network_mode: mongo_net
  ###################################### J&J  ####################################
  jj-cliente:
    build:
      context: 'smart-front'
      dockerfile: Dockerfile
      args:
        baseurl: http://35.169.169.38:8026/api/
        port: 8025
    container_name: jj-cliente
    ports:
      - '8025:8025'    #obrigratorio
  jej-api: #finalizado
    build:
      context: 'smart-api'
      dockerfile: Dockerfile
    command: npm start
    container_name: jj-api
    environment:
      NODE_ENV: production
      HOST: 35.169.169.38           #obrigatorios caso não coloque o DNS
      PORT: 8026                  #obrigatorios caso não coloque o DNS
      DATABASE: jj          #obrigatorios
      DATABASE_SERVICE: mongo       #qual o nome do seu banco Ex. o serviço mongo do docker é o nome do
      # DNS:
    tty: true
    ports:
      - '8026:8026'        #obrigratorio
    network_mode: mongo_net