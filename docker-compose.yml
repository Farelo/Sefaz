version: "3"

services:
  ################ NGINX (ficar descomentado até necessitar mudar algo neste container) ################

  # nginx-production:
  #   container_name: nginx-production
  #   image: nginx:latest
  #   restart: always
  #   ports:
  #     - 80:80
  #     - 443:443
  #   volumes:
  #     #volume para trazer o conf do nginx
  #     # - ./nginx/conf/nginx-production.conf:/etc/nginx/conf.d/default.conf
  #     - ./nginx/conf/:/etc/nginx/conf.d/

  #     #volume para trazer o fullchain.pem do dominio relog.com
  #     - /etc/letsencrypt/live/relogtechnology.com/fullchain.pem:/etc/letsencrypt/live/relogtechnology.com/fullchain.pem

  #     #volume para trazer o privkey.pem do dominio relog.com
  #     - /etc/letsencrypt/live/relogtechnology.com/privkey.pem:/etc/letsencrypt/live/relogtechnology.com/privkey.pem
  #   networks:
  #     # front-net: rede para comunicar nginx e frontend-web
  #     - front

  ################ MONGO (ficar descomentado até necessitar mudar algo neste container) ################

  # mongo:
    container_name: mongo-production
    image: mongo:4
    restart: always
    ports: 
      - 27017
    volumes: 
      # o /data/db da instância está linkado com o /adata/db do container, para poder acessar os arquivos do banco de fora do container e fazer backups
      - /data/db:/data/db
    networks:
      # mongo-net: rede para comunicar com os serviços que usam o banco mongoDb
      - db

  ################ QA ################

  qa-frontend-web:
    container_name: qa-frontend-web
    build:
      context: relog-frontend-web
      dockerfile: Dockerfile
      args:
        baseurl: "https://relogtechnology.com/api" # servico:porta/api que estará disponível a api do backend
        port: 80 # porta a ser passada ao node apra disponibilizar o front-end
    restart: always
    ports:
      - 80 # porta host:container que escutará (NGINX precisa dessa informação)
    networks:
      - front
    # depends_on:
    #   - nginx-production
    # - mongo

  qa-backend-api:
    container_name: qa-backend-api
    build:
      context: relog-backend-api
      dockerfile: Dockerfile
    # command: npm run prod
    # environment:
    restart: always
    ports:
      - 3000
    networks:
      - front
      - db
    # depends_on:
    #   - mongo
    tty: true

  qa-loka-api-job:
   container_name: qa-loka-api-job
   build:
     context: loka-api-dm-job
     dockerfile: Dockerfile
   restart: always
   # command: npm run start
   ports:
     - 8013
   networks:
     - db
   # depends_on:
   #   - mongo
   tty: true

  qa-state-machine-job:
    container_name: qa-state-machine-job
    build:
      context: relog-state-machine-job
      dockerfile: Dockerfile
    restart: always
    # command: npm run start
    ports:
      - 8012
    networks:
      - db
    # depends_on:
    #   - mongo
    tty: true

  # qa-loka-websocket-job:
  #   container_name: loka-websocket-job
  #   build:
  #     context: loka-websocket-job
  #     dockerfile: Dockerfile
  #   restart: always
  #   # command: npm run start
  #   ports:
  #     - 8014
  #   networks:
  #     - db
  #   # depends_on:
  #   #   - mongo
  #   tty: true

networks:
  front:
    external: true
  db:
    external: true
