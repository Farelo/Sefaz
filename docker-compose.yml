version: '3'

services:

  nginx-container:
    container_name: nginx-production
    image: nginx:latest
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      #volume para trazer o conf do nginx
      - ./conf/nginx-production.conf:/etc/nginx/conf.d/default.conf

      #volume para trazer o fullchain.pem do dominio relog.com
      - /etc/letsencrypt/live/relogtechnology.com/fullchain.pem:/etc/letsencrypt/live/relogtechnology.com/fullchain.pem

      #volume para trazer o privkey.pem do dominio relog.com
      - /etc/letsencrypt/live/relogtechnology.com/privkey.pem:/etc/letsencrypt/live/relogtechnology.com/privkey.pem
    networks:
      # front-net: rede para comunicar nginx e frontend-web
      - front-net

      # front-back: rede para comunicar nginx com a api do backend
      - front-back

  mongo:
      container_name: mongo-production
      image: mongo:4
      restart: always
      ports: 
        - 27017:27017
      volumes: 
        # o /data/db da instância está linkado com o /adata/db do container, para poder acessar os arquivos do banco de fora do container e fazer backups
        - /data/db:/data/db
      networks:
        # mongo-net: rede para comunicar com os serviços que usam o banco mongoDb
        - mongo-net

  ################ CEBRACE ################

  cebrace-frontend-web:
    container_name: cebrace-frontend-web
    build:
      context: relog-frontend-web
      dockerfile: Dockerfile
      args:
        baseurl: http://cebrace-backend-api:8011/api/ # servico:porta/api que estará disponível a api do backend
        port: 8010 # porta a ser passada ao node apra disponibilizar o front-end
    restart: always
    ports: 
      - 8010:8010 # porta host:container que escutará (NGINX precisa dessa informação)
    networks:
      - front-back
  

networks:
  front-net:
  front-back:
  # back-jobs:
  mongo-net: