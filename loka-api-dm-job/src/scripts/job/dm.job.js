const debug = require('debug')('job:loka')
const dm_controller = require('../loka-integration/dm.controller')
const { Packing } = require('../../models/packings.model')
const { DeviceData, device_data_save } = require('../../models/device_data.model')

module.exports = async () => {
    //end_search_date = currente environment timezone datetime
    const end_search_date = (new Date()).toLocaleString()
    
    const results = {}
    
    let concluded_devices = 0
    let error_devices = 0

    try {

        // let devices = [ { tag: { code: 4085902 } } ]
        let timeInit = new Date().getTime();

        let skip=0
        let jump=20
        let sleepTime=100
        let sleepped=0
        while(true){
            debug("Skip: "+skip)
            debug("Login")

            const cookie = await dm_controller.loginDM()

            //
            let ids = ['4085463', '4082471', '4082551', '4085239', '4085010', '4085468', '4086011', '4104431', '4105012', '4085588', '4084951', '4085876', '4085543', '4104091', '4084964', '4103925', '4104732', '4082484', '4103803', '4083586', '4086050', '4085443', '4085000', '4085338', '4085976', '4084989', '4084988', '4071482', '4103843', '4104131', '4083588', '4104456', '4103148', '4085328', '4085552', '4104128', '4074907', '4082610', '4082580', '4104023', '4104104', '4102746', '4104453', '4102764', '4103463', '4102805', '4084036', '4105000', '4104122', '4082406', '4085051', '4082617', '4085580', '4104342', '4105247', '4084835', '4103732', '4085992', '4085001', '4103073', '4082483', '4085170', '4104008', '4100840', '4100507', '4084977', '4085808', '4085256', '4086014', '4085229', '4082619', '4078683', '4083288', '4085591', '4103850', '4084996', '4103766', '4071597', '4102443', '4085255', '4084993', '4085806', '4105009', '4085011', '4085550', '4085469', '4082585', '4085506', '4084975', '4085035', '4085835', '4085318', '4082936', '4104016', '4104339', '4105031', '4103842', '4085548', '4085291', '4100938', '4085322', '4085193', '4102942', '4085454', '4103468', '4085790', '4085464', '4083888', '4084885', '4071491', '4103961', '4096558', '4085781', '4104126', '4105238', '4062996', '4105010', '4073330', '4104099', '4082411', '4085517', '4104026', '4103476', '4090208', '4082626', '4103751', '4103851', '4067147', '4104012', '4104114', '4085924', '4082510', '4086077', '4082519', '4083879', '4085247', '4085995', '4082930', '4102148', '4103460', '4084963', '4104800', '4084972', '4073260', '4085032', '4086046', '4085475', '4083710', '4085618', '4086040', '4083716', '4084959', '4104120', '4105237', '4104811', '4083578', '4080927', '4082581', '4102803', '4085669', '4104405', '4104701', '4082033', '4104129', '4105248', '4066979', '4102452', '4085172', '4102769', '4085173', '4102453', '4082325', '4084861', '4085838', '4104013', '4084814', '4085794', '4083278', '4084948', '4085253', '4084853', '4104024', '4103829', '4082623', '4062995', '4085237', '4085829', '4082508', '4102093', '4085324', '4100516', '4099678', '4102448', '4085462', '4102129', '4104441', '4083698', '4103772', '4103758', '4084957', '4105085', '4085783', '4102975', '4083576', '4103045', '4104130', '4103606', '4071350', '4085008', '4102748', '4085619', '4085910', '4082397', '4085280', '4103946', '4104019', '4104988', '4085136', '4104798', '4104491', '4085827', '4102432', '4090200', '4105032', '4102969', '4103599', '4082310', '4073261', '4085015', '4082472', '4084920', '4085917', '4085750', '4081915', '4103076', '4071487', '4082498', '4103938', '4100512', '4103833', '4085544', '4104349', '4073314', '4103810', '4102749', '4073694', '4102720', '4103818', '4105023', '4085188', '4103736', '4103982', '4103931', '4085315', '4103824', '4102146', '4103749', '4103976', '4082389', '4103994', '4093451', '4085937', '4085738', '4085146', '4082477', '4085231', '4073321', '4104794', '4084949', '4104417', '4103947', '4102767', '4103860', '4103873', '4103602', '4100504', '4104772', '4085299', '4086054', '4084855', '4071678', '4085441', '4085031', '4085026', '4085745', '4084842', '4085297', '4085804', '4083593', '4085044', '4085213', '4085265', '4085940', '4086006', '4084919', '4086048', '4105087', '4086063', '4102151', '4086072', '4104029', '4085316', '4103743', '4103075', '4085310', '4102439', '4103951', '4085176', '4105027', '4082588', '4104418', '4100527', '4085162', '4104980', '4086069', '4103593', '4102729', '4082927', '4085476', '4103975', '4103934', '4083577', '4104458', '4104270', '4084048', '4062720', '4080508', '4063883', '4080914', '4082888', '4080273', '4080173', '4080352', '4080313', '4080947', '4083246', '4080635', '4074688', '4096129', '4085862', '4080330', '4084040', '4080536', '4080870', '4095306', '4080953', '4080260', '4080859', '4095313', '4080184', '4075002', '4086357', '4080387', '4063992', '4104471', '4081734', '4081749', '4104691', '4063989', '4080385', '4084184', '4080398', '4062813', '4073325', '4080325', '4092598', '4095321', '4095305', '4104031', '4104363', '4083769', '4096435', '4105024', '4092580', '4095295', '4080270', '4102147', '4082361', '4082970', '4071219', '4105045', '4085281', '4104720', '4103928', '4093450', '4102144', '4103731', '4102434', '4103763', '4103950', '4104684', '4073323', '4085888', '4082486', '4083581', '4104992', '4089244', '4085444', '4103734', '4062889', '4103827', '4103591', '4085240', '4085019', '4071342', '4071466', '4103811', '4083589', '4086068', '4103479', '4103738', '4104105', '4102730', '4082554', '4071351', '4071477', '4103600', '4062705', '4085165', '4104588', '4082326', '4104977', '4082277', '4084955', '4104410', '4085491', '4085317', '4104723', '4103943', '4085633', '4090196', '4090212', '4103762', '4103922', '4071462', '4104380', '4071829', '4095323', '4071880', '4080495', '4082424', '4081150', '4062798', '4082210', '4080932', '4080334', '4104624', '4083483', '4080741', '4086288', '4080864', '4080190', '4080333', '4081730', '4071902', '4068920', '4096438', '4079424', '4078674', '4086036', '4103744', '4099671', '4071470', '4082616', '4103466', '4071191', '4102966', '4078679', '4085524', '4084834', '4085912', '4085311', '4080025', '4100842', '4083315', '4086066', '4103874', '4082548', '4102131', '4105245', '4085627', '4105148', '4103044', '4082475', '4102139', '4104780', '4103939', '4093092', '4103733', '4083709', '4085249', '4084942', '4099666', '4102158', '4081920', '4083283', '4103956', '4102435', '4103745', '4081924', '4082478', '4103876', '4104730', '4086053', '4103926', '4071336', '4082573', '4103782', '4102149', '4103903', '4104704', '4104015', '4080491', '4080054', '4086407', '4080501', '4080348', '4095337', '4096415', '4104087', '4085626', '4085219', '4105240', '4105235', '4084915', '4064006', '4080433', '4080755', '4095256', '4101334', '4084201', '4105118', '4082432', '4082080', '4074378', '4080269', '4080214', '4080191', '4078294', '4068360', '4080341', '4081517', '4080254', '4073579', '4080267', '4103825', '4080926', '4083462', '4084504', '4080236', '4080361', '4071835', '4080436', '4067145', '4082572', '4092582', '4082587', '4103513', '4081250', '4073293', '4093454', '4082305', '4102137', '4082530', '4103984', '4102096', '4073437', '4085287', '4082394', '4082544', '4078668', '4104000', '4082531', '4104108', '4102126', '4085744', '4085276', '4085773', '4085797', '4090211', '4082038', '4103955', '4082518', '4085668', '4103944', '4103930', '4104094', '4104403', '4105241', '4104719', '4085885', '4078358', '4104419', '4104717', '4100509', '4084943', '4104272', '4082387', '4085996', '4105029', '4102958', '4080394', '4082005', '4105222', '4082543', '4082321', '4083898', '4092630', '4082319', '4081917', '4085508', '4082348', '4078359', '4104401', '4082549', '4082517', '4082555', '4071695', '4082604', '4082571', '4083730', '4083580', '4102967', '4104764', '4082495', '4105025', '4083277', '4102950', '4104803', '4079783', '4062715', '4093085', '4073131', '4093020', '4082186', '4093196', '4080470', '4082728', '4092908', '4068049', '4093025', '4093201', '4093301', '4079906', '4093290', '4064294', '4081455', '4075389', '4096429', '4064305', '4083863', '4081362', '4082091', '4083865', '4080746', '4062836', '4085007', '4103862', '4096503', '4095160', '4080438', '4068925', '4085186', '4086056', '4085568', '4085194', '4085050', '4085438', '4085514', '4085279', '4085043', '4085200', '4085334', '4085999', '4086058', '4086032', '4085941', '4085578', '4085834', '4085177', '4084912', '4062884', '4102109', '4102716', '4082490', '4083567', '4103858', '4071190', '4085793', '4073697', '4071686', '4082365', '4083294', '4082583', '4082296', '4073316', '4083318', '4073440', '4083708', '4082523', '4071475', '4103977', '4073686', '4073565', '4083869', '4064289', '4083152', '4080488', '4080397', '4085809', '4085142', '4085439', '4085488', '4086052', '4085493', '4086005', '4104346', '4085528', '4085875', '4104442', '4085984', '4085474', '4081926', '4082553', '4102154', '4102133', '4073438', '4103748', '4100514', '4085128', '4085667', '4085986', '4104808', '4081909', '4083868', '4083289', '4085993', '4078666', '4104010', '4105013', '4104430', '4085784', '4073692', '4102756', '4085821', '4082935', '4085288', '4085002', '4071479', '4082521', '4073674', '4085828', '4073562', '4082482', '4073308', '4085264', '4084905', '4082330', '4071206', '4082975', '4082939', '4082301', '4084776', '4084764', '4081038', '4080329', '4083291', '4080301', '4080332', '4104330', '4104392', '4080630', '4081521', '4103878', '4102743', '4082280', '4080019', '4082545', '4086007', '4104971', '4067730', '4071696', '4071330', '4073688', '4073319', '4102130', '4083305', '4080885', '4078292', '4082677', '4083301', '4084758', '4084630', '4096554', '4104103', '4071465', '4062874', '4082204', '4080249', '4080525', '4082725', '4083335', '4082383', '4103852', '4084475', '4096259', '4080030', '4101448', '4081214', '4096110', '4082816', '4101327', '4084803', '4083054', '4042489', '4081603', '4080717', '4084871', '4085824', '4084848', '4082035', '4082525', '4082408', '4082281', '4083731', '4082308', '4081997', '4081985', '4084726', '4084715', '4085740', '4084773', '4080317', '4080264', '4104329', '4080263', '4081234', '4083341', '4083352', '4086164', '4104954', '4095298', '4082415', '4080321', '4084635', '4080271', '4082963', '4084725', '4082624', '4085342', '4086015', '4083066', '4104309', '4063726', '4084361', '4093088', '4082108', '4082016', '4085640', '4064632', '4083748', '4071324', '4083706', '4075384', '4067721', '4086379', '4080534', '4068345', '4081459', '4082357', '4084713', '4084765', '4081462', '4083622', '4089875', '4096603', '4084453', '4074908', '4081216', '4082418', '4081243', '4084717', '4083005', '4084670', '4093103', '4082442', '4095350', '4082360', '4086505', '4082362', '4062815', '4089881', '4083896', '4062929', '4080934', '4080893', '4081000', '4102964', '4096275', '4062936', '4103461', '4090206', '4082450', '4080335', '4092579', '4080967', '4081075', '4095307', '4062877', '4092583', '4095610', '4095286', '4084054', '4075385', '4096424', '4068653', '4095178', '4104355', '4096118', '4095168', '4095194', '4078363', '4062702', '4062819', '4096117', '4068346', '4081930', '4084760', '4096430', '4085852', '4071946', '4082700', '4081208', '4095264', '4083329', '4084174', '4082987', '4082980', '4095421', '4080475', '4084358', '4086175', '4080462', '4084732', '4064287', '4082266', '4080480', '4081957', '4096120', '4082735', '4082071', '4081074', '4084185', '4081276', '4095933', '4095182', '4083131', '4086436', '4083114', '4093382', '4104924', '4083504', '4082741', '4083514', '4071952', '4071643', '4091986', '4085360', '4093022', '4062954', '4082323', '4095811', '4086133', '4082347', '4086423', '4104695', '4081751', '4104984', '4085747', '4103979', '4096256', '4082147', '4096504', '4084351', '4079910', '4084322', '4081270', '4083272', '4080531', '4411286', '4080855', '4023301', '4085537', '4073267', '4086404', '4096261', '4081544', '4095330', '4095169', '4075396', '4074375', '4071650', '4071911', '4090139', '4071323', '4064283', '4068932', '4084289', '4085756', '4083338', '4082425', '4063991', '4082364']
            let obj_ids = ids.map(function(id) { return id; });
            let devices = await Packing.find({'tag.code': {$in: obj_ids}}, {_id: 0, tag: 1}).skip(skip).limit(skip)
            //

            //let devices = await Packing.find({}, {_id: 0, tag: 1}).skip(skip).limit(skip)

            if(devices === null || devices.length === 0) {
                break;
            }
            let device_data_promises = devices.map(async packing => {
                try {
                    //recupera a última mensagem
                    const last_message_date = await DeviceData.find({device_id: packing.tag.code}, {_id: 0, message_date: 1}).sort({message_date: 'desc'}).limit(1)
    
                    const week_in_milliseconds = 604800000
    
                    //cria janela de tempo de uma semana antes da última mensagem enviada
                    let start_search_date = last_message_date[0] ? add_seconds(last_message_date[0].message_date, 1) :  new Date(Date.parse(new Date()) - week_in_milliseconds)
    
                    //convete esse timestamp para string
                    start_search_date = start_search_date.toLocaleString()
    
                    //verifica na loka se o device existe
                    await dm_controller.confirmDevice(packing.tag.code, cookie)
    
                    
                    const device_data_array = await dm_controller.getDeviceDataFromMiddleware(packing.tag.code, start_search_date, end_search_date, null, cookie)
    
                    if (device_data_array) {
    
                        await device_data_save(device_data_array)
    
                        concluded_devices++
    
                        //nao precisa realizar o return device_data_array, a nao ser que queira debugar o loop for-await-for abaixo
                        // return device_data_array
                    }
    
                } catch (error) {
    
                    debug('Erro ocorrido no device: ' + packing.tag.code + ' | ' + error)
    
                    error_devices++
                }
                
            })
    
            //esse for existe dessa maneira somente para garantir que cada promessa do array de promessas de devices seja finalizado (resolvido ou rejeitado) 
            for await (const device_data_promise of device_data_promises) {
                
            }

            skip=skip+jump;
            debug("Logout")

            await dm_controller.logoutDM(cookie)

            debug("Sleep inicio -")
            await promise_wait_seconds(sleepTime)
            debug("Sleep fim -")
            sleepped+=sleepTime
        }
        
        // debug(devices)


        let timeFinish = new Date().getTime();
        let timeTotal = timeFinish-timeInit

        
        results.result1 = `Devices que deram certo:  ${concluded_devices}`

        results.result2 = `Devices que deram errado:  ${error_devices}`

        results.result3 = `Job LOKA encerrado em ${new Date().toISOString()} com sucesso!`

        debug('Tempo de sleep (sec): '+sleepped)

        debug('Tempo total de execução (sec): '+timeTotal/1000)

        return Promise.resolve(results)

    } catch (error) {

        return Promise.reject(`Job LOKA encerrado em ${new Date().toISOString()} com erro | `+ error)
    }
}

const add_seconds = (date_time, seconds_to_add) => { return new Date(date_time.setSeconds(date_time.getSeconds() + seconds_to_add)) }

const promise_wait_seconds = async seconds => {

    return new Promise((resolve) => {

        setTimeout(() => {
            resolve(`SLEEP: Aguardou ${seconds} segundos`)            
        }, seconds * 1000);

    })

}